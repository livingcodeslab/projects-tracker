#+STARTUP: content
#+TITLE: Microfluidics Device: Expected Valve States for Each Command
#+LATEX_HEADER_EXTRA: \usepackage{svg}
#+BIBLIOGRAPHY: references.bib
#+CITE_EXPORT: natbib kluwer
#+LATEX_HEADER_EXTRA: \usepackage{fontspec}
#+LATEX: \setmainfont{Liberation Serif}
#+OPTIONS: ^:{}

* Introduction

The recent debug efforts in May 2025, specifically on the 20^{th} and 27^{th},
revealed some ways to validate the correct operation of the microfluidics device
by ensuring the valves are powered off or on appropriately.

In this document/report, I'll look at breaking down all the commands possible,
and laying down the expected states for each valve for the specific command in
question.

** Conventions

All commands have the =-T= argument. This argument takes a integer value. The
value is interpreted as the number of seconds to keep the command active for.

All except the =WAIT= command have the ~-R~ argument. This argument takes an
integer value. This value in the rotation rate for the peristaltic pump. The
recommended maximum value is =36=.

We *shall not* handle testing that the values for the arguments above (=-T= and
=-R=) are honoured in this document; rather, we'll focus only on valve states in
this document.

* Command: =PRIME=

This command handles priming various channels with the wash or reagents,
depending on the value specified for the first argument.

There are 2 forms of this command, the =CHEM_WASH= and the =-C= forms.

** Command: =PRIME CHEM_WASH <var1> -T … -R …=



The =CHEM_WASH= argument tells the system to use the "wash" reagent to prime the
selected lines. The choice for the line to use is determined by the value of the
=<var1>= argument.

The acceptable values for =<var1>= are: 0, 1, 2, 3, 4, 5, 6, 7, 8, 10

|----------+--------------------------------------------------------------------|
| =<var1>= | Description                                                        |
|----------+--------------------------------------------------------------------|
|        0 | This primes the "wash" line only.                                  |
|        1 | This primes channel 1's wash line only.                            |
|        2 | This primes channel 2's wash line only.                            |
|        3 | This primes channel 3's wash line only.                            |
|        4 | This primes channel 4's wash line only.                            |
|        5 | This primes channel 5's wash line only.                            |
|        6 | This primes channel 6's wash line only.                            |
|        7 | This primes channel 8's wash line only.                            |
|        8 | This primes channel 8's wash line only.                            |
|       10 | This primes all the channel wash lines, starting with 8 down to 1. |
|----------+--------------------------------------------------------------------|

*** Command: =PRIME CHEM_WASH 0 -T … -R …=

*MEANING*: Prime the "wash" line, up to the common line with the "wash" reagent.

The "wash" should be allowed to flow through the "wash" line for this command to
work correctly. This means that the "wash" valve (valve 4) should be powered on.

We do not want anything going into the collection vial during priming, therefore
the collection valve (valve 1) should be powered off. Meanwhile, the "GFET Out"
valve (valve 2) should be powered on to redirect fluid to waste, before the GFET.

#+begin_verse
*BUG*: valve 1 being powered off allows waste output flow from valve 2 to flow
into the GFET through the "GFET IN" port (port C). Maybe, we should have another
valve between the "normally open" port of valve 1 and the waste port (port G).

This bug will be present for *ALL* commands that attempt to bypass the GFET and
output to the waste port.
#+end_verse

We turn off the vent (air) valve (valve 3), to prevent air from being drawn in.

All other valves are off.

|-------+-------|
| Valve | State |
|-------+-------|
|     1 |     0 |
|     2 |     1 |
|     3 |     0 |
|     4 |     1 |
|     5 |     0 |
|     6 |     0 |
|     7 |     0 |
|     8 |     0 |
|     9 |     0 |
|    10 |     0 |
|    11 |     0 |
|    12 |     0 |
|    13 |     0 |
|    14 |     0 |
|    15 |     0 |
|    16 |     0 |
|    17 |     0 |
|    18 |     0 |
|    19 |     0 |
|    20 |     0 |
|-------+-------|

*** Command: =PRIME CHEM_WASH <var1=1—8> -T … -R …=

For these, we open the respective wash lines for each channel, and prevent flow
through the GFET into collection.

These suffer the same bug as above.

|-------+--------+--------+--------+--------+--------+--------+--------+--------|
| Valve | var1=1 | var1=2 | var1=3 | var1=4 | var1=5 | var1=6 | var1=7 | var1=8 |
|-------+--------+--------+--------+--------+--------+--------+--------+--------|
|     1 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |
|     2 |      1 |      1 |      1 |      1 |      1 |      1 |      1 |      1 |
|     3 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |
|     4 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |
|     5 |      1 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |
|     6 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |
|     7 |      0 |      1 |      0 |      0 |      0 |      0 |      0 |      0 |
|     8 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |
|     9 |      0 |      0 |      1 |      0 |      0 |      0 |      0 |      0 |
|    10 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |
|    11 |      0 |      0 |      0 |      1 |      0 |      0 |      0 |      0 |
|    12 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |
|    13 |      0 |      0 |      0 |      0 |      1 |      0 |      0 |      0 |
|    14 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |
|    15 |      0 |      0 |      0 |      0 |      0 |      1 |      0 |      0 |
|    16 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |
|    17 |      0 |      0 |      0 |      0 |      0 |      0 |      1 |      0 |
|    18 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |
|    19 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      1 |
|    20 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |
|-------+--------+--------+--------+--------+--------+--------+--------+--------|

** Command: =PRIME -C <var1> -T … -R …=

Acceptable values for =<var1>= are: 1, 2, 3, 4, 5, 6, 7, 8, 10

⋮

* Command: =WASH=

This command runs the wash "reagent" across the specified channels.

It has five different forms, i.e. =CHEM_WASH=, =-C=, =COLLECT=, =COMMON= and
=ALL=.

** Command: =WASH CHEM_WASH 0 -T … -R …=

** Command: =WASH -C <var1> -T … -R …=

Acceptable values for =<var1> are 1, 2, 3, 4, 5, 6, 7, 8

** Command: =WASH COLLECT 0 -T … -R …=

** Command: =WASH COMMON 0 -T … -R …=

** Command: =WASH ALL 0 -T … -R …=

* Command: =PURGE=

This command concerns itself with purging channels with air — it could also be
named the =VENT= command.

It has 2 forms: =ALL= and =COMMON=

** Command: =PURGE ALL 0 -T … -R …=

** Command: =PURGE COMMON 0 -T … -R …=

* Command: =COLLECT -C <var1> -T … -R …=

This opens the collection valve, and pushes the reagent selected out to the
collection output.

* Command: =PUMP -C <var1> -T … -R …=

This pumps the fluid/reagent from the selected channel. The acceptable values
for =<var1>= are 1, 2 , 3, 4, 5, 6, 7, 8.

It is unclear, at this point, where the reagent should be routed; collection or waste.

* Command: =WAIT -T <var1>=

This command just waits for the total number of seconds specified in =<var1>=.

The pump, and all the valves, should be powered off.

* Future Improvements

** Error and State Indication

The device does not have any indicator for errors, or what the valve states are.
Malformed commands, or invalid arguments are simply ignored, and the device does
nothing.

The closest thing we get as communication, back from the device is an =ACK= or
=NAK= message. Unfortunately, however, the device does sometimes begin spamming
the =NAK= signal to the communication channel, making it mostly unhelpful.

State indication will be very useful for debugging problems with the device. My
recent forays into debugging issues would have been greatly aided by the
existence of such a feature.

A future iteration of the device should have indications for the state of the
device. The indicators could be:

- light-emitting diodes on the device for each valve,
- some form of screen on the device to indicate the state
- serial communication to a "management program" with state updates

If we go with the "on-device screen" or "management program" options, then, in
addition to the pump and valve states, we should indicate the active command.
