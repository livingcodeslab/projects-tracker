#+STARTUP: content
#+TITLE: Progress Report and Updates
#+BIBLIOGRAPHY: references.bib

* Introduction

The idea of this page is to provide a semi-regular report on the results from
the work done.

* Rough notes

** Before 2025-04-18

Used a Graphenea GFET S-20[fn:gfet-s-20] chip and attempted to get device
characteristics. This was the very first chip, and we'll refer to it as *chip00*.

We ran the device in three "modes":
- open-air
- with distilled water
- with 1X PBS solution

The characteristics curves are shown below:

*** Open-Air

The current characteristics curves with the chip in the open-air mode was as follows

[[file:images/Before-2025-04-16/chip00/open_air_current_characteristics.svg]]

while the resistance characteristics were as follows

[[file:images/Before-2025-04-16/chip00/open_air_resistance_characteristics.svg]]

*** Distilled-Water

The current characteristics were

[[file:images/Before-2025-04-16/chip00/distilled_water_current_characteristics.svg]]

and the resistance characteristics were

[[file:images/Before-2025-04-16/chip00/distilled_water_resistance_characteristics.svg]]

*** 1X Phosphate Buffered Saline (PBS) Solution

The current characteristics were

[[file:images/Before-2025-04-16/chip00/1xpbs_current_characteristics.svg]]

and the resistance characteristics were

[[file:images/Before-2025-04-16/chip00/1xpbs_resistance_characteristics.svg]]

*** Conclusion

The open-air configuration is not a useful configuration for use, but it does
give us a baseline, and a way to verify operation of the device.

The characteristics curves for distilled water were as expected.

The characteristics curves for 1X PBS were very different from expectations.

The characteristics of the device seem to have been altered significantly after
the 1X PBS round — we no longer got expected curves for any of the other two
configurations.

** 2025-04-18

Started off with a new Graphenea GFET S-20[fn:gfet-s-20] chip, *chip01* and
attempted to get its characteristics.

The characteristics curve I got for the open-air iteration was:

#+CAPTION: Current Characteristics of Chip01: I_{D} vs. V_{G}: Open-Air
#+NAME: chip01-open-air-current-xristics-01
[[file:images/2025-04-16/chip01/open_air_current_characteristics.svg]]

and with distilled water, I got:

#+CAPTION: Current Characteristics of Chip01: I_{D} vs. V_{G}: Distilled Water
#+NAME: chip01-dwater-current-xristics-01
[[file:images/2025-04-16/chip01/distilled-water-current-characteristics.svg]]

#+CAPTION: Resistance Characteristics of Chip01: R_{D} vs. V_{G}: Distilled Water
#+NAME: chip01-dwater-resist-xristics-01
[[file:images/2025-04-16/chip01/distilled-water-resistance-characteristics.svg]]

The current characteristics curves are nice and clear.

The resistance characteristics curves are ruined (mostly) by the 50kΩ spike,
which probably occurs at the 4.16×10^{-16}V Gate voltage.

After removing the 4.16×10^{-16}V gate voltage data, the resistance
characteristics graphs become:

#+CAPTION: Resistance Characteristics of Chip01: R_{D} vs. V_{G}: Distilled Water
#+NAME: chip01-dwater-resist-xristics-no-zero-vg
[[file:images/2025-04-16/chip01/distilled-water-resistance-characteristics-no-zero-vg.svg]]

which is much nicer. This also demonstrates that we probably do not want to run
with a gate voltage of near zero, since the characteristics at that point might
be a tad unstable.

  At this point, we used a 1X PBS (Phosphate Buffered Saline) solution for testing.
  As in *chip00* mentioned previously, this broke the new chip — the
  characteristics for the 1X PBS solution is as follows

#+CAPTION: Current Characteristics of Chip01: I_{D} vs. V_{G}: 1X PBS
#+NAME: chip01-pbs-current-xristics-01
[[file:images/2025-04-16/chip01/pbs-solution-current-characteristics.svg]]

#+CAPTION: Resistance Characteristics of Chip01: R_{D} vs. V_{G}: 1X PBS
#+NAME: chip01-pbs-resist-xristics-01
[[file:images/2025-04-16/chip01/pbs-solution-resistance-characteristics.svg]]

We do get a few curves for the current characteristics, that follow the roughly
bell-shaped curves seen before, though these ones are weird. The resistance
curves, or rather, the lack thereof, is indicative of a problem.

After running the chip with the 1X PBS solution, we attempt to verify whether
the chip was still functioning as expected. The characteristic curves for
open-air and distilled water are as follows, after using the 1X PBS:


- Open-air current characteristics after 1X PBS
  #+CAPTION: Current Characteristics of Chip01: I_{D} vs. V_{G}: Open-Air After 1X PBS
  #+NAME: chip01-open-air-after-pbs-current-xristics-01
  [[file:images/2025-04-16/chip01/open-air-verify-01-current-characteristics.svg]]

- Open-air resistance characteristics after 1X PBS
  #+CAPTION: Resistance Characteristics of Chip01: R_{D} vs. V_{G}: Open-Air After 1X PBS
  #+NAME: chip01-open-air-after-pbs-resist-xristics-01
  [[file:images/2025-04-16/chip01/open-air-verify-01-resistance-characteristics.svg]]

- Distilled water current characteristics after 1X PBS
  #+CAPTION: Current Characteristics of Chip01: I_{D} vs. V_{G}: Open-Air After 1X PBS
  #+NAME: chip01-open-air-after-pbs-current-xristics-01
  [[file:images/2025-04-16/chip01/distilled-water-verify-current-characteristics.svg]]

- Distilled water resistance characteristics after 1X PBS
  #+CAPTION: Resistance Characteristics of Chip01: R_{D} vs. V_{G}: Open-Air After 1X PBS
  #+NAME: chip01-open-air-after-pbs-resist-xristics-01
  [[file:images/2025-04-16/chip01/distilled-water-verify-resistance-characteristics.svg]]


The new curves indicate that the new chip, chip01, had its characteristics
drastically altered by the high concentration of PBS (for reference, Graphenea
used 0.001X PBS[fn:gfet-measurement-protocols])

This is, probably the reason why the chips, seemingly, broke.


The mitigation measure planned is to soak the devices in acetone according to to
the documentation from Graphenea[fn:gfet-measurement-protocols].

The two broken chips (*chip00* and *chip01*) were, each, submerged in 1ml of
acetone in a pyrex container (1 chip per container) and left overnight.

** 2025-04-18

The acetone baths for each of the chips had evaporated overnight.

We, then submerged each of the chips in 2 ml of acetone, and gently agitated
the container for about 2 minutes.

We then proceeded to pipette the acetone in the baths into a waste container.
The chips were then, each submerged in 2ml of isopropyl alcohol (IPA) and
agitated in order to rinse them.

We then dried each chip by running it under a stream of nitrogen gas for a while.

We then ran a quick and dirty check for the properties of *chip01* to see
whether cleaning the chip was helpful to restore the characteristics/usefulness
of the chip.

The current characteristics, for the chip in the open-air configuration are:

#+CAPTION: Current Characteristics of Chip01: I_{D} vs. V_{G}: Open-Air After Chip Cleanup
#+NAME: chip01-open-air-after-chip-cleanup-current-xristics
[[file:images/2025-04-18/chip01/open-air-current-characteristics.svg]]

whereas, the resistance characteristics in the open-air configuration are:

#+CAPTION: Resistance Characteristics of Chip01: R_{D} vs. V_{G}: Open-Air After Chip Cleanup
#+NAME: chip01-open-air-after-chip-cleanup-resistance-xristics
[[file:images/2025-04-18/chip01/open-air-resistance-characteristics.svg]]

The current characteristics for the distilled-water configuration, after cleanup, gives:

#+CAPTION: Current Characteristics of Chip01: I_{D} vs. V_{G}: Distilled-Water After Chip Cleanup
#+NAME: chip01-distilled-water-after-chip-cleanup-current-xristics
[[file:images/2025-04-18/chip01/distilled-water-current-characteristics.svg]]

and the corresponding resistance characteristics after cleanup are:

#+CAPTION: Resistance Characteristics of Chip01: R_{D} vs. V_{G}: Distilled-Water After Chip Cleanup
#+NAME: chip01-distilled-water-after-chip-cleanup-resistance-xristics
[[file:images/2025-04-18/chip01/distilled-water-resistance-characteristics.svg]]

The curves after cleaning up with acetone, rinsing with IPA and drying indicate,
at least for *chip01* that the cleaning protocol does restore the chip to nearly
the original point of operation (compare [[chip01-dwater-resist-xristics-no-zero-vg][original resistance characteristics]] to
the [[chip01-distilled-water-after-chip-cleanup-resistance-xristics][resistance characteristics after chip cleanup]]).

** 2025-04-22

Take the characteristics of *chip00* after cleanup with acetone.

In the open-air configuration, after acetone chip-cleanup, the current
characteristics for *chip00* are:

#+CAPTION: Current Characteristics of Chip00: I_{D} vs. V_{G}: Open-Air After Chip Cleanup
#+NAME: chip00-open-air-after-chip-cleanup-current-xristics
[[file:images/2025-04-22/chip00/after-acetone-cleanup/open-air-current-characteristics.svg]]

whereas the resistance characteristics are:

#+CAPTION: Resistance Characteristics of Chip00: R_{D} vs. V_{G}: Open-Air After Chip Cleanup
#+NAME: chip00-open-air-after-chip-cleanup-resistance-xristics
[[file:images/2025-04-22/chip00/after-acetone-cleanup/open-air-resistance-characteristics.svg]]


In the distilled-water configuration, after acetone chip-cleanup, the current
characteristics for *chip00* are:

#+CAPTION: Current Characteristics of Chip00: I_{D} vs. V_{G}: Distilled-Water After Chip Cleanup
#+NAME: chip00-distilled-water-after-chip-cleanup-current-xristics
[[file:images/2025-04-22/chip00/after-acetone-cleanup/distilled-water-current-characteristics.svg]]

whereas the resistance characteristics

#+CAPTION: Resistance Characteristics of Chip00: R_{D} vs. V_{G}: Distilled-Water After Chip Cleanup
#+NAME: chip00-distilled-water-after-chip-cleanup-resistance-xristics
[[file:images/2025-04-22/chip00/after-acetone-cleanup/distilled-water-resistance-characteristics.svg]]

These curves support the previous conclusion that the acetone-IPA-nitrogen
chip-cleaning protocol does, indeed, restore the chip properties to near where
they originally were.

** 2025-04-23

Dilute 1X PBS to 0.001X PBS by:
- Put 10μL of 1X PBS in a reagent bottle
- Add 9990μL of distilled water in the same reagent bottle
- Put cap on bottle and shake vigorously

We use *chip00* for the initial trial with the *0.001X PBS* solution.

The current characteristics curves become:
#+CAPTION: Current Characteristics Curves, 0.001X PBS, Chip00
#+NAME: chip00-current-xristics-0.001X-PBS
[[file:images/2025-04-23/chip00/0-001X-pbs-current-characteristics.svg]]

and those for the resistance are:
#+CAPTION: Resistance Characteristics Curves, 0.001X PBS, Chip00
#+NAME: chip00-resistance-xristics-0.001X-PBS
[[file:images/2025-04-23/chip00/0-001X-pbs-resistance-characteristics.svg]]

The results above hint at the cause of the chip seemingly failing after using
1X PBS, and possibly after using 0.001X PBS (we'll verify this later).

It looks like whenever the channel voltage (V_{D}) goes positive, something in
the PBS solution gets deposited onto the chip, such that the characteristics of
the chip are drastically altered. The following images demonstrate this.

The current and resistance characteristics for *chip00* with 0.001X PBS with
channel voltages (V_{D}) from -1.7V to 0.1V are:

#+CAPTION: Current Characteristics Curves, 0.001X PBS, Chip00, -1.7V ≤ V_{D} < 0.0V
#+NAME: chip00-current-xristics-0.001X-PBS-negative-channel-voltages
[[file:images/2025-04-23/chip00/0-001X-pbs-current-characteristics-neg1.7Vtoneg0.1V.svg]]

#+CAPTION: Resistance Characteristics Curves, 0.001X PBS, Chip00, -1.7V ≤ V_{D} < 0.0V
#+NAME: chip00-resistance-xristics-0.001X-PBS-negative-channel-voltages
[[file:images/2025-04-23/chip00/0-001X-pbs-resistance-characteristics-neg1.7Vtoneg0.1V.svg]]

Meanwhile, the current and resistance characteristics for *chip00* with 0.001X
PBS with channel voltages (V_{D}) from -1.7V to 0.1V are:

#+CAPTION: Current Characteristics Curves, 0.001X PBS, Chip00, 0.0V ≤ V_{D} ≤ 1.7V
#+NAME: chip00-current-xristics-0.001X-PBS-positive-channel-voltages
[[file:images/2025-04-23/chip00/0-001X-pbs-current-characteristics-0.0Vto1.7V.svg]]

#+CAPTION: Resistance Characteristics Curves, 0.001X PBS, Chip00, 0.0V ≤ V_{D} ≤ 1.7V
#+NAME: chip00-resistance-xristics-0.001X-PBS-positive-channel-voltages
[[file:images/2025-04-23/chip00/0-001X-pbs-resistance-characteristics-0.0Vto1.7V.svg]]

*** Conclusions

- We *can* vary the gate voltage, *V_{G}*, from negative voltages, through zero to
  positive voltages.
- The channel/drain voltage, *V_{D}*, /must always/ remain negative. Positive
  voltages for the channel/drain lead to instabilities in the device.

** 2025-04-24

Began the day by putting *chip00* in acetone bath to clean it.

We now verify our conclusions from yesterday with data from *chip01*. We remove
all data for channel/drain voltages ≥ 0V, and get:

Current characteristics for *chip01*, distilled water, -1.7V ≤ V_{D} < 0V

#+CAPTION: Current Characteristics, Distilled Water, Chip01, 0.0V ≤ V_{D} < 0V
#+NAME: chip00-current-xristics-distilled-water-negative-channel-voltages
[[file:images/2025-04-24/chip01/distilled-water-current-characteristics-neg1.7Vtoneg0.1V.svg]]

Resistance characteristics for *chip01*, distilled water, -1.7V ≤ V_{D} < 0V

#+CAPTION: Resistance Characteristics, Distilled Water, Chip01, 0.0V ≤ V_{D} < 0V
#+NAME: chip00-resistance-xristics-distilled-water-negative-channel-voltages
[[file:images/2025-04-24/chip01/distilled-water-resistance-characteristics-neg1.7Vtoneg0.1V.svg]]

** 2025-04-30

*** opentrons[fn:opentrons] Temperature Module[fn:opentrons-temp-module]

The goal was to figure out whether it is possible to control the opentrons
temperature module without the robot.

It turns out that [[https://support.opentrons.com/s/article/Running-your-module-without-the-robot][it is possible]].

We, however, want to attempt control without downloading and using the CoolTerm
application, so, let us see whether it is possible to do this with the Linux
command line first.

Begin by connecting the temperature module and running ~dmesg~:
#+begin_src shell
  $ sudo dmesg -T
  ⋮
  [Wed Apr 30 11:55:33 2025] usb 1-2: new full-speed USB device number 6 using xhci_hcd
  [Wed Apr 30 11:55:33 2025] usb 1-2: New USB device found, idVendor=04d8, idProduct=ee93, bcdDevice= 1.00
  [Wed Apr 30 11:55:33 2025] usb 1-2: New USB device strings: Mfr=1, Product=2, SerialNumber=3
  [Wed Apr 30 11:55:33 2025] usb 1-2: Product: Opentrons TempDeck
  [Wed Apr 30 11:55:33 2025] usb 1-2: Manufacturer: Microchip Technology Inc
  [Wed Apr 30 11:55:33 2025] cdc_acm 1-2:1.0: ttyACM0: USB ACM device
  [Wed Apr 30 11:55:33 2025] usbcore: registered new interface driver cdc_acm
  [Wed Apr 30 11:55:33 2025] cdc_acm: USB Abstract Control Model driver for USB modems and ISDN adapters
#+end_src

Okay, nice. so the device shows, as =Product: Opentrons TempDeck=, and its
vendor and product identifiers are =04d8= nad =ee93= respectively. We also see
that it is accessible at =/dev/ttyACM0= for this attempt.

The devices begins with an initial temperature of 21℃

#+CAPTION: Opentrons Temperature Module: Starting point on attaching to computer
#+NAME: opentrons-temp-module
[[file:images/2025-04-30/opentrons_temperature_module.jpg]]

Now, let's try connecting to it with plain =sh= or =bash= commands. These assume
your user is a member of the =dialout= group.

Start off by setting the baud rate:

#+begin_src shell
  stty -F /dev/ttyACM0 115200
#+end_src

Now confirm the baud rate

#+begin_src shell
  stty -F /dev/ttyACM0 speed
#+end_src

that should respond with ~115200~.

Good, now try setting the temperature to 4℃:

#+begin_src shell
  echo "M104 S004" > /dev/ttyACM0
#+end_src

Observed:

- Indicator light turned blue
- Fan ramped up very quickly — I was a little apprehensive
- Temperature indicator started dropping
- Heating/cooling surface began to cool!
- The indicator does actually get to 4℃ and remain there

Okay! Nice! Now turn off the module:

#+begin_src shell
  echo "M18" > /dev/ttyACM0
#+end_src

The fan stops, and the temperature indicator starts counting upward.

Let's try heating up to say, 40℃:

#+begin_src shell
  echo "M104 S040" > /dev/ttyACM0
#+end_src

- Indicator light turned red
- Fan turned on, but is not as fast as the cooling attempt
- Temperature indicator started rising
- Heating/cooling surface gets warm
- The indicator get's to 40℃
- Any time the indicator goes above 40℃, the motor ramps up to cool it

Nice! Heating works too! Turn it off again.

#+begin_src shell
  echo "M18" > /dev/ttyACM0
#+end_src

**** Conclusions

- we can control the temperature module directly on the command-line
- we cannot modulate fan speed for cooling
- using pySerial, it should be possible to write code to integrate the
  temperature module into our workflow.

*** GFET S-20 Literature review

The drain voltage is set to less than 100mv [cite:@biagetti01:@khan01:@xu01]
* Footnotes
[fn:opentrons-temp-module] https://opentrons.com/products/temperature-module-gen2

[fn:opentrons] https://opentrons.com/
[fn:gfet-measurement-protocols] https://cdn.shopify.com/s/files/1/0191/2296/files/2025_Measurement_Protocols_GFET-S2X_v5.pdf?v=1736951757 

[fn:gfet-s-20] Graphenea's GFET S-20 chip https://www.graphenea.com/products/gfet-s20-for-sensing-applications
